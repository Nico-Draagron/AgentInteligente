{
  "name": "DatathONS_Prototipo",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "options": {
          "systemMessage": "Voc√™ √© o assistente ONSINSIGHTS, especializado em dados do setor el√©trico brasileiro do ONS (Operador Nacional do Sistema).\n\nOBJETIVO PRINCIPAL: Retornar uma resposta em linguagem natural e, quando poss√≠vel, um objeto de visualiza√ß√£o JSON, estritamente no formato de sa√≠da.\n\nINSTRU√á√ïES DE OPERA√á√ÉO:\n\n1. Explora√ß√£o e Prioridade do Dicion√°rio de Dados\n- PRIMEIRA TAREFA: Consulte a tabela vetorial documents (dicion√°rios).\n- Use para identificar campos corretos e datasets adequados.\n- Apresente tudo dispon√≠vel sobre o tema sem pedir confirma√ß√µes.\n\n2. Identifica√ß√£o de tabelas relevantes\n- Use \"Selecionar dataset\" para escolher tabelas relevantes.\n- Combine informa√ß√µes de documents com consulta_tabelas.\n\n3. Verifica√ß√£o em documents antes de SQL\n- SEMPRE verifique documents primeiro.\n- Se a informa√ß√£o existir l√°, use direto sem SQL.\n- Nunca use COUNT, SUM, AVG se j√° existir em documents.\n\n4. Gera√ß√£o de SQL (somente se necess√°rio)\n- Apenas se n√£o encontrar em documents.\n- PostgreSQL compat√≠vel.\n- Inclua filtros relevantes.\n\n5. Apresenta√ß√£o da resposta\n- Sempre em linguagem natural clara.\n- Nunca invente dados.\n\n---\nVISUALIZA√á√ïES E FORMATO DE SA√çDA:\nVoc√™ DEVE retornar a resposta **SOMENTE** no formato JSON abaixo.\n\nA sua resposta final DEVE seguir estritamente o seguinte formato JSON:\n{\n¬† \"text\": \"Sua resposta em linguagem natural aqui.\",\n¬† \"tables\": [],\n¬† \"columns\": [],\n¬† \"sql_query\": \"\",\n¬† \"visualization\": {\n¬† ¬† \"type\": \"tipo_de_grafico\", // line, bar, pie, scatter, histogram, timeseries\n¬† ¬† \"labels\": [\"...\"],\n¬† ¬† \"values\": [1, 2, 3],\n¬† ¬† // ... demais campos, como \"extra\"\n¬† }\n}\n\nExemplo (Para o pedido \"Gere um gr√°fico de teste\"):\n{\n¬† \"text\": \"Embora eu n√£o tenha conseguido acessar os dados em tempo real, aqui est√° um gr√°fico de teste com a distribui√ß√£o de tipos de usinas para ilustrar nossa capacidade de visualiza√ß√£o.\",\n¬† \"tables\": [],\n¬† \"columns\": [],\n¬† \"sql_query\": \"\",\n¬† \"visualization\": {\n¬† ¬† \"type\": \"pie\",\n¬† ¬† \"labels\": [\"Hidrel√©trica\", \"E√≥lica\", \"Solar\"],\n¬† ¬† \"values\": [65, 20, 15],\n¬† ¬† \"extra\": {\n¬† ¬† ¬† \"title\": \"Distribui√ß√£o por Fonte (%)\"\n¬† ¬† }\n¬† }\n}\n\nREGRAS DE FORMATA√á√ÉO:\n- NUNCA inclua o objeto 'visualization' ou qualquer outro JSON dentro do campo 'text'.\n- O campo 'visualization' deve ser um objeto JSON v√°lido, gerado a partir de dados reais do banco (NUNCA invente valores).\n- Os arrays 'labels' e 'values' devem ter o mesmo tamanho.\nREGRA IMPORTANTE: \n- Para gr√°ficos de TESTE ou EXEMPLO: USE valores ilustrativos\n- Para dados REAIS do banco: consulte primeiro e use apenas valores reais"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        624,
        -16
      ],
      "id": "42084ed4-56fb-4727-9a63-ee4d2a6aabf9",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        400,
        192
      ],
      "id": "43614d97-42ec-4774-94b4-a6d360ff7360",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "VUPjJRZoSwWrjCNT",
          "name": "nicolas-API"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "=Use isto para ter as informa√ß√µes de qual dataset √© mais indicado para responder √† pergunta do usu√°rio.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        960,
        368
      ],
      "id": "61387b39-e295-4421-98a6-15c88af39a00",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "bPvMht8Ew9XYvBiw",
          "name": "Supabase_DatathONS"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "stripNewLines": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1024,
        512
      ],
      "id": "c047eb5c-a051-4c5d-ba56-1108153d76cc",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "ZrHE62UHTiQL1Hfc",
          "name": "API_DatathONS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1344,
        320
      ],
      "id": "b453d8ed-b67b-4be8-b848-dda066e79752",
      "name": "Execute a SQL query in Postgres",
      "credentials": {
        "postgres": {
          "id": "jo10MrnSzopIO5e8",
          "name": "Postgres_DatathONS"
        }
      }
    },
    {
      "parameters": {
        "description": "Chame essa fun√ß√£o para extrair tabelas e campos de tabelas escolhidas.",
        "workflowId": {
          "__rl": true,
          "value": "atJu7pVGJ0rMNNU7",
          "mode": "list",
          "cachedResultUrl": "/workflow/atJu7pVGJ0rMNNU7",
          "cachedResultName": "SubWorkflow_SelecionarTabela"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        688,
        512
      ],
      "id": "5a375402-60df-4e4d-b863-b1048c5aa219",
      "name": "Selecionar dataset"
    },
    {
      "parameters": {
        "chunkSize": 2000
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
      "typeVersion": 1,
      "position": [
        0,
        1536
      ],
      "id": "9064cd5c-c80f-4113-b2c3-fddb01836c39",
      "name": "Token Splitter"
    },
    {
      "parameters": {
        "content": "### üìö Carregando Dicion√°rios no Supabase",
        "height": 640,
        "width": 768,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -480,
        1056
      ],
      "typeVersion": 1,
      "id": "c196ed56-757d-460d-8f91-e27217f5380d",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "formTitle": "Upload Dicion√°rio ONS",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Upload o(s) documento(s)",
              "fieldType": "file",
              "acceptFileTypes": ".pdf, .csv",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -400,
        1120
      ],
      "id": "79131cd0-f2f5-4ae4-ac43-1cac3edcfb11",
      "name": "On form submission1",
      "webhookId": "419b23c9-1392-4a68-b508-e4bdfa84680a"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        -176,
        1136
      ],
      "id": "c0da1e14-ff6b-4de6-9589-965c579826a7",
      "name": "Supabase Vector Store2",
      "credentials": {
        "supabaseApi": {
          "id": "bPvMht8Ew9XYvBiw",
          "name": "Supabase_DatathONS"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -272,
        1376
      ],
      "id": "7d68ffad-0a88-49ca-b020-89c62ad70ef7",
      "name": "Embeddings OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "ZrHE62UHTiQL1Hfc",
          "name": "API_DatathONS"
        }
      }
    },
    {
      "parameters": {
        "dataType": "binary",
        "textSplittingMode": "custom",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        -96,
        1328
      ],
      "id": "b803c380-9115-42e7-85ca-2b1e26e1552a",
      "name": "Default Data Loader1"
    },
    {
      "parameters": {
        "content": "### 1. Consulta \n### Dicion√°rio de Dados",
        "height": 400,
        "width": 336
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        464,
        256
      ],
      "typeVersion": 1,
      "id": "2aea8003-7dba-45ae-a2fb-471150271181",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "### 2. Consulta tabelas\n### Tabela que relaciona\n### Dados com dicion√°rio",
        "height": 240,
        "width": 320
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        80,
        400
      ],
      "typeVersion": 1,
      "id": "7bf36950-f4ed-441d-8727-ab90b3e72c3b",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "### 3. Agente cria query baseada na pergunta consultar dados e responder pergunta",
        "height": 304,
        "width": 256
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        832,
        160
      ],
      "typeVersion": 1,
      "id": "38100063-e51c-4108-972e-9fd3618ae8b2",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "jsCode": "// Pega a resposta do AI Agent\nconst agentResponse = $input.first().json;\n\n// Pega dados do Merge Cache para preservar sess√£o\nconst mergeData = $('Merge Cache Data').first().json;\n\n// Inicializa resposta limpa\nlet text = \"\";\nlet visualization = null;\nlet tables = [];\nlet columns = [];\nlet sql_query = \"\";\n\n// O AI Agent pode retornar de v√°rias formas\n// 1. Campo output (formato padr√£o do n8n Agent)\n// 2. Campo text \n// 3. JSON completo como string no output/text\n\n// Extrai o texto principal\nconst rawOutput = agentResponse.output || agentResponse.text || agentResponse.answer || \"\";\n\n// Verifica se o output √© um JSON completo (Agent retornou JSON como string)\nif (rawOutput.trim().startsWith('{') && rawOutput.trim().endsWith('}')) {\n  try {\n    const parsedJson = JSON.parse(rawOutput);\n    \n    // Se parseou com sucesso e tem campo text, usa os dados parseados\n    if (parsedJson.text) {\n      text = parsedJson.text;\n      tables = parsedJson.tables || [];\n      columns = parsedJson.columns || [];\n      sql_query = parsedJson.sql_query || \"\";\n      visualization = parsedJson.visualization || null;\n    } else {\n      // JSON mas sem campo text, usa como texto\n      text = rawOutput;\n    }\n  } catch (e) {\n    // N√£o √© JSON v√°lido, usa como texto normal\n    text = rawOutput;\n  }\n} else {\n  // Output normal, n√£o √© JSON\n  text = rawOutput;\n  \n  // Tenta pegar outros campos se existirem\n  tables = agentResponse.tables || [];\n  columns = agentResponse.columns || [];\n  sql_query = agentResponse.sql_query || \"\";\n  visualization = agentResponse.visualization || null;\n}\n\n// Garante que visualization seja objeto ou null\nif (typeof visualization === 'string' && visualization.trim() !== '') {\n  try {\n    visualization = JSON.parse(visualization);\n  } catch (e) {\n    visualization = null;\n  }\n}\n\n// Fallback para texto vazio\nif (!text || text.trim() === '') {\n  text = \"Desculpe, n√£o consegui processar sua solicita√ß√£o. Por favor, tente novamente.\";\n}\n\n// Monta hist√≥rico atualizado\nconst updatedHistory = [...(mergeData.conversationHistory || [])];\n\n// Adiciona mensagem do usu√°rio\nif (mergeData.chatInput) {\n  updatedHistory.push({\n    role: \"user\",\n    content: mergeData.chatInput\n  });\n}\n\n// Adiciona resposta do assistente\nupdatedHistory.push({\n  role: \"assistant\",\n  content: text\n});\n\n// Limita hist√≥rico a 20 mensagens (10 pares)\nif (updatedHistory.length > 20) {\n  updatedHistory.splice(0, updatedHistory.length - 20);\n}\n\n// Atualiza contexto\nconst updatedContext = { ...(mergeData.contextData || {}) };\nif (sql_query) {\n  updatedContext.lastQuery = sql_query;\n  updatedContext.lastQueryTime = new Date().toISOString();\n}\nif (tables.length > 0) {\n  updatedContext.lastTables = tables;\n}\n\n// Retorna dados estruturados\nreturn [{\n  json: {\n    // Resposta principal\n    text: text,\n    tables: tables,\n    columns: columns,\n    sql_query: sql_query,\n    visualization: visualization,\n    \n    // Dados da sess√£o (IMPORTANTE para Redis)\n    sessionId: mergeData.sessionId || \"default\",\n    userId: mergeData.userId || \"anonymous\",\n    \n    // Hist√≥rico e contexto atualizados\n    conversationHistory: updatedHistory,\n    contextData: updatedContext,\n    \n    // Preserva chatInput original\n    chatInput: mergeData.chatInput || \"\",\n    \n    // Timestamp\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        944,
        0
      ],
      "id": "31d59d98-343b-4e1f-aa6f-8e74f2285669",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "af615c3e-1131-492d-8c03-b5f4a01cb0c6",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -432,
        -32
      ],
      "id": "a25ba35f-5e8d-4796-a5d5-c57bcc2d23e3",
      "name": "Webhook1",
      "webhookId": "af615c3e-1131-492d-8c03-b5f4a01cb0c6"
    },
    {
      "parameters": {
        "jsCode": "// Acessa o primeiro item de forma mais segura.\n// Usamos $json porque ele j√° √© um atalho para o primeiro item (se o modo for 'Run Once for All Items').\nconst inputData = $input.first().json; \nconst body = inputData.body || inputData; // Tenta pegar de 'body' ou usa a raiz do JSON\n\nconst chatInput = body.chatInput || body.message || '';\nconst sessionId = body.sessionId || 'default';\nconst userId = body.userId || 'anonymous';\nconst metadata = body.metadata || {};\n\n// Garante que sessionId e userId n√£o estejam vazios\nif (!sessionId || !userId) {\n  console.error('sessionId ou userId est√£o vazios ou indefinidos:', { sessionId, userId });\n  throw new Error('sessionId e userId s√£o obrigat√≥rios');\n}\n\nconst timestamp = new Date().toISOString();\n\n// Retorna o item processado (apenas 1)\nreturn [{\n  json: {\n    chatInput: chatInput,\n    sessionId,\n    userId,\n    timestamp,\n    metadata,\n    shouldCheckCache: true\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -128,
        -32
      ],
      "id": "7d23378e-74b9-424d-b2c6-fe5473270bfc",
      "name": "Preparar  data"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "cachedHistory",
        "key": "=",
        "options": {}
      },
      "id": "ba98be34-c4f8-4eeb-9164-9453b8c648a3",
      "name": "Redis - Get History",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        112,
        48
      ],
      "credentials": {
        "redis": {
          "id": "izRUNdEceSYwPxhg",
          "name": "Redis account"
        }
      },
      "disabled": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Pega os dados do Preparar data\nconst requestData = $('Preparar  data').first().json;\n\n// Tenta pegar os resultados do Redis (se existir)\nlet historyNode = [];\nlet contextNode = [];\n\ntry {\n  historyNode = $('Redis - Get History').all() || [];\n} catch {\n  historyNode = [];\n}\n\ntry {\n  contextNode = $('Redis - Get Context').all() || [];\n} catch {\n  contextNode = [];\n}\n\n// Inicializa vari√°veis\nlet conversationHistory = [];\nlet contextData = {};\n\n// Processa hist√≥rico do Redis\nif (historyNode.length > 0) {\n  const historyResult = historyNode[0].json;\n  if (historyResult?.cachedHistory) {\n    try {\n      const parsed = JSON.parse(historyResult.cachedHistory);\n      conversationHistory = Array.isArray(parsed) ? parsed : [];\n    } catch {\n      conversationHistory = [];\n    }\n  }\n}\n\n// Processa contexto do Redis\nif (contextNode.length > 0) {\n  const contextResult = contextNode[0].json;\n  if (contextResult?.cachedContext) {\n    try {\n      const parsed = JSON.parse(contextResult.cachedContext);\n      contextData = (typeof parsed === 'object' && parsed !== null) ? parsed : {};\n    } catch {\n      contextData = {};\n    }\n  }\n}\n\n// Monta a mensagem atual para o AI Agent\nconst currentMessage = requestData.chatInput || requestData.message || \"\";\n\n// Valida mensagem\nif (!currentMessage || currentMessage.trim() === \"\") {\n  throw new Error(\"Mensagem do usu√°rio est√° vazia. chatInput: \" + JSON.stringify(requestData));\n}\n\n// Retorna dados estruturados para o AI Agent\nreturn [{\n  json: {\n    message: currentMessage,\n    sessionId: requestData.sessionId || \"default\",\n    userId: requestData.userId || \"anonymous\",\n    conversationHistory,\n    contextData,\n    timestamp: requestData.timestamp || new Date().toISOString(),\n    metadata: requestData.metadata || {},\n    chatInput: currentMessage,\n    totalMessages: conversationHistory.length,\n    hasContext: Object.keys(contextData).length > 0,\n    redisActive: (historyNode.length > 0 || contextNode.length > 0)\n  }\n}];\n"
      },
      "id": "f52740e3-4857-4e8d-a544-c47fe16d8097",
      "name": "Merge Cache Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        -32
      ],
      "retryOnFail": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        608,
        160
      ],
      "id": "d0cc6d20-46eb-407f-9846-e0c072f69ccb",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "izRUNdEceSYwPxhg",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{$json.sessionId}}:history",
        "value": "=={{ JSON.stringify($json.conversationHistory) }}",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1152,
        48
      ],
      "id": "d1addb6f-e6b6-4e23-923e-01ad6d0c36bf",
      "name": "Redis - Set History",
      "credentials": {
        "redis": {
          "id": "izRUNdEceSYwPxhg",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{JSON.stringify($json)}}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1936,
        -48
      ],
      "id": "d525721d-c170-4305-8c5f-14e822c8368c",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "// Pega os dados do node anterior\nconst data = $input.first().json;\n\n// Parse do visualization se necess√°rio\nlet viz = null;\nif (data.visualization) {\n  if (typeof data.visualization === 'string') {\n    try {\n      viz = JSON.parse(data.visualization);\n    } catch (e) {\n      viz = null;\n    }\n  } else if (typeof data.visualization === 'object') {\n    viz = data.visualization;\n  }\n}\n\n// Retorna apenas os campos relevantes para o frontend\nreturn [{\n  json: {\n    text: data.text || \"\",\n    tables: data.tables || [],\n    columns: data.columns || [],\n    sql_query: data.sql_query || \"\",\n    visualization: viz\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1456,
        -32
      ],
      "id": "256a3781-915b-4c08-92c1-d1a7131063a3",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{$json.sessionId}}:context",
        "value": "=={{ JSON.stringify($json.contextData) }}",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1152,
        -112
      ],
      "id": "7978c4ae-0cea-47eb-9349-47a4b1882a67",
      "name": "Redis - Set Context",
      "credentials": {
        "redis": {
          "id": "izRUNdEceSYwPxhg",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "cachedContext",
        "key": "return {   key: `sessao-${$json.sessionId}:context`, };",
        "options": {}
      },
      "id": "f52b75c0-77ec-49ec-88b0-762d3ad83d12",
      "name": "Redis - Get Context",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        112,
        160
      ],
      "retryOnFail": false,
      "executeOnce": false,
      "alwaysOutputData": false,
      "credentials": {
        "redis": {
          "id": "izRUNdEceSYwPxhg",
          "name": "Redis account"
        }
      },
      "disabled": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\n\n// Garante que temos um JSON v√°lido\nconst response = {\n  text: input.text || \"\",\n  tables: input.tables || [],\n  columns: input.columns || [],\n  sql_query: input.sql_query || \"\",\n  visualization: input.visualization || null\n};\n\n// Retorna como string JSON\nreturn [{\n  json: {\n    responseString: JSON.stringify(response)\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1648,
        80
      ],
      "id": "be11ee59-a1ef-4d1c-b7ef-8bac000cc7fd",
      "name": "enviar para api",
      "disabled": true
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query in Postgres": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Selecionar dataset": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Token Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "On form submission1": {
      "main": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader1": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Redis - Set History",
            "type": "main",
            "index": 0
          },
          {
            "node": "Redis - Set Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Preparar  data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar  data": {
      "main": [
        [
          {
            "node": "Redis - Get History",
            "type": "main",
            "index": 0
          },
          {
            "node": "Redis - Get Context",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Cache Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Cache Data": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis - Get History": {
      "main": [
        [
          {
            "node": "Merge Cache Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Redis - Set History": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "enviar para api",
            "type": "main",
            "index": 0
          },
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis - Set Context": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis - Get Context": {
      "main": [
        [
          {
            "node": "Merge Cache Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "enviar para api": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "93cdb578-70d7-4a9b-b7b7-b014ce4b3029",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c41a1a3c9ef6078f92aeb4d274a5d7dc119b59dc60953e96a1bf97279426206e"
  },
  "id": "CNIYkSQ9XU3mq4w7",
  "tags": []
}